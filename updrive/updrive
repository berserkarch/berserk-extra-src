#!/usr/bin/env python3

import os
import json
import base64
import argparse
import sys
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow

# Scopes required
SCOPES = ['https://www.googleapis.com/auth/drive.file']


def get_token():
    google_creds_b64 = os.environ.get("CLIENT_SECRET")
    if not google_creds_b64:
        raise RuntimeError("CLIENT_SECRET environment variable is not set")
    
    client_secrets = "/tmp/client_secret.json"
    with open(client_secrets, "w") as f:
        f.write(base64.b64decode(google_creds_b64).decode("utf-8"))

    flow = InstalledAppFlow.from_client_secrets_file(client_secrets, SCOPES)

    creds = flow.run_local_server(port=0)
    print("Access Token: {}".format(creds.token))
    print("Refresh Token: {}".format(creds.refresh_token))
    print("Expiry Token: {}".format(creds.expiry))

def get_drive_service():
    google_creds_b64 = os.environ.get("CLIENT_SECRET")
    if not google_creds_b64:
        raise RuntimeError("CLIENT_SECRET environment variable not set")

    client_info = json.loads(base64.b64decode(google_creds_b64).decode('utf-8'))['installed']

    client_id = client_info['client_id']
    client_secret = client_info['client_secret']

    refresh_token = os.environ.get("REFRESH_TOKEN")
    if not refresh_token:
        raise RuntimeError("REFRESH_TOKEN environment variable not set")

    creds = Credentials(
        None,
        refresh_token=refresh_token,
        token_uri='https://oauth2.googleapis.com/token',
        client_id=client_id,
        client_secret=client_secret,
        scopes=SCOPES
    )

    # Refresh token to get a valid access token
    creds.refresh(Request())
    return build('drive', 'v3', credentials=creds)

def upload_file(filename, folder_id):
    service = get_drive_service()
    file_metadata = {'name': os.path.basename(filename)}
    if folder_id:
        file_metadata['parents'] = [folder_id]
    media = MediaFileUpload(filename, resumable=True)
    file = service.files().create(
        body=file_metadata,
        media_body=media,
        fields='id'
    ).execute()
    print('File ID:', file.get('id'))

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog='UpDrive',
        description="Upload files on google drive",
        epilog="Gaurav Raj (@thehackersbrain) <me@thehackersbrain.xyz>"
    )

    parser.add_argument(
        "-f",
        "--file",
        help="Specify the file to upload",
        required=True
    )
    parser.add_argument(
        "--dir-id",
        help="Specify Google Drive Directory ID"
    )
    parser.add_argument(
        "--get-token",
        help="Get the GOOGLE REFRESH TOKEN",
        action="store_true"
    )

    args = parser.parse_args()

    if args.get_token:
        get_token()
        sys.exit()
    
    dir_id = args.dir_id or os.environ.get("DIRECTORY_ID")
    
    # Change these as needed or pass via args/env
    upload_file(args.file, dir_id)
